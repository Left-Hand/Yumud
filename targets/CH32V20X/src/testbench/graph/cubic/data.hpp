#pragma once


#include "types/vector3/Vector3.hpp"


struct mat4_t
{
	float m[4][4];
};


static const std::array vertex =
{
	Vector3_t<float>{-1.0f, -1.0f, -1.0f}, // 0
	Vector3_t<float>{ 1.0f,  1.0f, -1.0f}, // 1
	Vector3_t<float>{ 1.0f, -1.0f, -1.0f}, // 2
	Vector3_t<float>{-1.0f,  1.0f, -1.0f}, // 3
	Vector3_t<float>{-1.0f, -1.0f,  1.0f}, // 4
	Vector3_t<float>{ 1.0f, -1.0f,  1.0f}, // 5
	Vector3_t<float>{ 1.0f,  1.0f,  1.0f}, // 6
	Vector3_t<float>{-1.0f,  1.0f,  1.0f}, // 7
};
// static const std::array<Vector2_t<float>, 36> texcoord =
static const std::array texcoord =
{
	// back face
	Vector2_t<float>{0.0f, 1.0f}, // bottom-left
	Vector2_t<float>{1.0f, 0.0f}, // top-right
	Vector2_t<float>{0.0f, 0.0f}, // bottom-right         
	Vector2_t<float>{1.0f, 0.0f}, // top-right
	Vector2_t<float>{0.0f, 1.0f}, // bottom-left
	Vector2_t<float>{1.0f, 1.0f}, // top-left
	// front face
	Vector2_t<float>{0.0f, 0.0f}, // bottom-left
	Vector2_t<float>{0.0f, 1.0f}, // bottom-right
	Vector2_t<float>{1.0f, 1.0f}, // top-right
	Vector2_t<float>{1.0f, 1.0f}, // top-right
	Vector2_t<float>{1.0f, 0.0f}, // top-left
	Vector2_t<float>{0.0f, 0.0f}, // bottom-left
	// left face
	Vector2_t<float>{1.0f, 1.0f}, // top-right
	Vector2_t<float>{1.0f, 0.0f}, // top-left
	Vector2_t<float>{0.0f, 0.0f}, // bottom-left
	Vector2_t<float>{0.0f, 0.0f}, // bottom-left
	Vector2_t<float>{0.0f, 1.0f}, // bottom-right
	Vector2_t<float>{1.0f, 1.0f}, // top-right
	// right face
	Vector2_t<float>{1.0f, 0.0f}, // top-left
	Vector2_t<float>{0.0f, 1.0f}, // bottom-right
	Vector2_t<float>{1.0f, 1.0f}, // top-right         
	Vector2_t<float>{0.0f, 1.0f}, // bottom-right
	Vector2_t<float>{1.0f, 0.0f}, // top-left
	Vector2_t<float>{0.0f, 0.0f}, // bottom-left     
	// bottom face
	Vector2_t<float>{1.0f, 0.0f}, // top-right
	Vector2_t<float>{1.0f, 1.0f}, // top-left
	Vector2_t<float>{0.0f, 1.0f}, // bottom-left
	Vector2_t<float>{0.0f, 1.0f}, // bottom-left
	Vector2_t<float>{0.0f, 0.0f}, // bottom-right
	Vector2_t<float>{1.0f, 0.0f}, // top-right
	// top face
	Vector2_t<float>{1.0f, 0.0f}, // top-left
	Vector2_t<float>{0.0f, 1.0f}, // bottom-right
	Vector2_t<float>{1.0f, 1.0f}, // top-right     
	Vector2_t<float>{0.0f, 1.0f}, // bottom-right
	Vector2_t<float>{1.0f, 0.0f}, // top-left
	Vector2_t<float>{0.0f, 0.0f}  // bottom-left     
};
static const auto cubic_index = std::to_array<uint8_t>(
{
	// back face
	1, // top-right
	0, // bottom-left
	2, // bottom-right         
	1, // top-right
	0, // bottom-left
	3, // top-left
	// front face
	4, // bottom-left
	5, // bottom-right
	6, // top-right
	6, // top-right
	7, // top-left
	4, // bottom-left
	// left face
	7, // top-right
	3, // top-left
	0, // bottom-left
	0, // bottom-left
	4, // bottom-right
	7, // top-right
	// right face
	6, // top-left
	2, // bottom-right
	1, // top-right         
	2, // bottom-right
	6, // top-left
	5, // bottom-left     
	// bottom face
	0, // top-right
	2, // top-left
	5, // bottom-left
	5, // bottom-left
	4, // bottom-right
	0, // top-right
	// top face
	3, // top-left
	6, // bottom-right
	1, // top-right     
	6, // bottom-right
	3, // top-left
	7, // bottom-left     
});
static const uint16_t doge[32][32] =
{
	{0xfc2d,0xfc2d,0xfdcd,0xfdcd,0xff8d,0xff8d,0xcfed,0xcfed,0x97ed,0x97ed,0x67ce,0x6fce,0x67d4,0x67d4,0x6fba,0x6fba,0x6edd,0x6ede,0x653e,0x655e,0x6b9f,0x6b9f,0x935f,0x935e,0xa319,0xb33b,0xfb5d,0xfb5d,0xfb57,0xfb57,0xfb50,0xfb50},
	{0xfc2d,0xfc2d,0xfdcd,0xfdcd,0xff8d,0xff8d,0xcfed,0xcfed,0x97cd,0x97ed,0x67ad,0x772c,0x8ed1,0x9e2f,0x9df2,0x9db1,0x9d53,0x9d74,0x9496,0x8cd9,0x737c,0x639e,0x935e,0x8b7a,0x8b2f,0xb2da,0xeb1c,0xeb1c,0xeb15,0xe2f4,0xf330,0xfb50},
	{0xfdcd,0xf5cd,0xf78d,0xf78d,0xcfcd,0xcfed,0x97ed,0x97cd,0x67ad,0x7eec,0xa5ed,0xcd49,0xe569,0xe528,0xe549,0xdd6a,0xedcc,0xee0d,0xee0d,0xe56a,0xc48e,0x9bf5,0xa376,0x73ce,0x92c9,0xaa4f,0xba2c,0xba2c,0xba09,0xba09,0xebec,0xf42d},
	{0xf5cd,0xf5cc,0xf78c,0xf78d,0xcfcd,0xcfcd,0x97cc,0x97ac,0x964a,0xbd2c,0xddb3,0xee96,0xe655,0xe696,0xe6d6,0xe6f6,0xe672,0xcdcf,0xeeb1,0xff54,0xf714,0xc5d1,0x8ae7,0x8a85,0xd965,0xd923,0xd123,0xc944,0xc145,0xd2ac,0xf40c,0xf42c},
	{0xf76c,0xf76c,0xc7ac,0xc7ac,0x97ac,0x97cc,0x6f6d,0x95ab,0xddcc,0xf6f3,0xf739,0xf75a,0xf75a,0xf77a,0xf79a,0xf79a,0xf756,0xf796,0xe6d3,0xef14,0xf7b6,0xce32,0x8a64,0x9a04,0xe0e3,0xe0e3,0xd903,0xc8e3,0xc964,0xd309,0xf5ac,0xf5cc},
	{0xf76c,0xc62a,0x95c9,0x95e9,0x75e9,0x75e9,0x6569,0x6c68,0xb54e,0xb4ed,0xbc8b,0xbc4d,0xbc4e,0xbc4c,0xbc6c,0xb46c,0xacce,0xad30,0xa551,0x9570,0x9570,0x7c6b,0xb1c4,0xd0e4,0xd8e3,0xd8e3,0xd0e3,0xc8e3,0xc903,0xc144,0xe4ca,0xf5cc},
	{0xc7ac,0xa64a,0x6d49,0x6d69,0x6549,0x83e4,0x9c8d,0x7bec,0x7bcc,0xce36,0xbdf5,0x834a,0x8bab,0xce76,0xce78,0xce58,0xb512,0x7329,0xacad,0x8cce,0x8d30,0x646a,0x9224,0xb164,0xd8a3,0xd8a3,0xc8e3,0xc903,0xc944,0xb1a4,0xd5ca,0xf76c},
	{0xcfcc,0xc7ac,0x978c,0x978c,0x7e4b,0xcd4a,0xf717,0xef5a,0xef5a,0xf7bc,0xf7dc,0xbd10,0xde13,0xf7fb,0xf7dd,0xf7df,0xf75c,0xbd53,0xd673,0xef9a,0xe7ba,0x9e52,0x8243,0xa1e5,0xe905,0xd904,0xc903,0xc0e3,0xc163,0xbba8,0xef0c,0xf78c},
	{0x97cc,0x97cc,0x6fee,0x6f6d,0xbd0c,0xded7,0xf7dc,0xf7dc,0xf7dc,0xf73a,0xc4af,0x8a25,0x9ac8,0xddf3,0xf79c,0xffbe,0xff9e,0xef3b,0xef5b,0xf7fc,0xf7dc,0xded8,0x73ea,0x53c6,0x7b67,0x9285,0xc184,0xe103,0xe2a4,0xde6b,0xcfcc,0xcfcc},
	{0x97cd,0x97ed,0x6fee,0x962a,0xed8e,0xf7bd,0xffdc,0xf7ba,0xf7ba,0xc5d3,0x7141,0x8162,0x7941,0x8244,0xe697,0xffdc,0xffbd,0xffbd,0xffbd,0xf7bc,0xf7dc,0xff9b,0xce96,0x7c8c,0x7368,0xa44c,0xc44d,0xd306,0xc243,0xbcc8,0xc78c,0xcfcc},
	{0x6fce,0x67ce,0x67b4,0xbd2a,0xf691,0xf79f,0xffdb,0xffb7,0xeeb3,0xbcab,0x91e1,0x9181,0x8941,0x99e0,0xddd0,0xf735,0xff9a,0xff9b,0xff7e,0xff9c,0xffbc,0xf7dc,0xf7bb,0xdef8,0x842b,0xce53,0xef97,0xee2f,0xc487,0xbecb,0x97ac,0x97cc},
	{0x6fce,0x67ce,0x6f12,0xb56c,0xf754,0xf79a,0xf734,0xf6ee,0xf6ad,0xee6c,0xde0a,0xd588,0xcd47,0xe60b,0xf6ee,0xf6ee,0xff12,0xff57,0xff7b,0xffbc,0xf7bc,0xefdc,0xefdb,0xefdc,0xc655,0xd6d5,0xffb7,0xf751,0xc568,0xbf2b,0x97ed,0x97cc},
	{0x6ff4,0x6ff4,0x7696,0xc5ad,0xee90,0xf6b5,0xee6f,0xee6c,0xf68c,0xf6ad,0xf6cc,0xf6ac,0xf6cc,0xf6ed,0xf6cd,0xf6cd,0xf6d0,0xf714,0xf75a,0xffbc,0xf7bc,0xefdc,0xefdb,0xefdb,0xef99,0xef98,0xff76,0xf751,0xcd89,0x8e8b,0x6fee,0x67ce},
	{0x6ff4,0x6ff4,0x9675,0xe569,0xf64b,0xd60c,0xccec,0xcc2b,0xd48a,0xdd6b,0xf68c,0xf66a,0xfecb,0xfeea,0xfece,0xf6af,0xde2c,0xd5eb,0xde0d,0xd634,0xd635,0xe6d6,0xf778,0xffb8,0xf779,0xf736,0xf712,0xf6ef,0xd548,0x9e4b,0x6fee,0x67ce},
	{0x6ffb,0x6ffb,0x8dd7,0xdd4b,0xccca,0xcdd6,0xee76,0x9b49,0x7120,0x8a20,0xcca8,0xf6ac,0xfeed,0xfecd,0xf6cf,0xc52b,0xcd33,0xde57,0xcd90,0x8285,0x79e4,0x9b49,0xcd4e,0xf6d1,0xf6b1,0xf6d0,0xf6ae,0xf6cd,0xdd88,0x8e4b,0x6ff4,0x67d4},
	{0x6ffb,0x6ffb,0x8dd7,0xccaa,0xcc8d,0xf73e,0xee57,0x8aa7,0x7962,0x7981,0x9aa3,0xee8c,0xfecd,0xfeee,0xd5ac,0xd58e,0xf71d,0xff9d,0xbd51,0x81c2,0x8980,0x8160,0x8a40,0xee0b,0xfecc,0xfecb,0xf6aa,0xf6cb,0xe567,0x8e4b,0x6ff4,0x67d4},
	{0x6f1f,0x6f1f,0x84d8,0xd4eb,0xc48c,0xeebb,0xf678,0x9309,0xc450,0x7a47,0xa3cb,0xee8e,0xf6ed,0xf70d,0xd5ce,0xd593,0xf73e,0xff7e,0xb553,0x81c4,0x9a66,0x89a2,0x8a80,0xee0c,0xfecc,0xfecb,0xf6aa,0xf6ab,0xd547,0x7e70,0x6ffb,0x67db},
	{0x6f1f,0x6f1f,0x64ba,0xd52c,0xedca,0xc4f0,0xdd73,0xa3cc,0xbc51,0xac70,0xe6b7,0xf711,0xf70e,0xf70d,0xf6f5,0xc552,0xcd98,0xde79,0xc573,0x8267,0xcc4d,0xa307,0xbcc9,0xee8d,0xf6cc,0xf6ec,0xf6cb,0xf66a,0xcd27,0x66f2,0x6ffb,0x67db},
	{0x6d5f,0x6d5f,0x637d,0xc4ac,0xf608,0xeeae,0xe6d5,0xde97,0xde7b,0xef1c,0xffbc,0xf773,0xf70f,0xef0c,0xf736,0xf71a,0xdeb7,0xd614,0xd5f4,0xcd72,0xd592,0xd5b0,0xee8f,0xeeee,0xf6ec,0xf6cb,0xf6aa,0xf5e8,0xc4eb,0x677a,0x6efe,0x66fe},
	{0x6d5f,0x6d5f,0x6b9e,0xa3f4,0xdd47,0xf6ca,0xf6ef,0xf711,0xff76,0xffb7,0xffb7,0xf752,0xf730,0xf70e,0xff53,0xff75,0xff97,0xf797,0xf798,0xf773,0xf730,0xf6ce,0xf6ce,0xf6cd,0xf6ec,0xf6cc,0xf68a,0xf546,0xad91,0x67db,0x66fe,0x66fe},
	{0x6b9f,0x6b9f,0x935f,0x933a,0xd507,0xf6c9,0xf6ec,0xf70e,0xf732,0xf753,0xf754,0xff51,0xf730,0xff2f,0xf711,0xf712,0xf714,0xf714,0xf714,0xf70f,0xeeed,0xf6cd,0xf6cd,0xf6cd,0xf6ec,0xf6ec,0xf66a,0xe507,0x85f9,0x6f1f,0x655e,0x655e},
	{0x6b9f,0x6b9f,0x935f,0x933b,0xcc87,0xd5a6,0xf6cc,0xf6ee,0xf6cd,0xf6cd,0xf6ee,0xf710,0xff30,0xff10,0xfeef,0xfeee,0xfeed,0xfeed,0xf6ed,0xf6ed,0xf6ee,0xf6ee,0xf6ed,0xf6ed,0xf6ec,0xf6cc,0xdd88,0xd466,0x8db8,0x6f1f,0x655e,0x655e},
	{0x935f,0x935f,0xcb5f,0xbb39,0xcc85,0xd504,0xe609,0xf6ac,0xf6cd,0xf6cd,0xf6ee,0xf6ee,0xff0f,0xff0f,0xff0f,0xff0f,0xff0f,0xff0f,0xff2f,0xff2f,0xf70f,0xf70e,0xf70e,0xf70e,0xf6cc,0xe5e9,0xdd25,0xd4e8,0x94b7,0x6d5f,0x639e,0x639e},
	{0x935f,0x935f,0xcb5f,0xbb76,0xdd27,0xee08,0xe608,0xf68a,0xf6ee,0xf70f,0xf70f,0xf6ee,0xf6cd,0xf6ed,0xfeef,0xff0f,0xff0f,0xff0f,0xff10,0xf72f,0xf72f,0xf72e,0xf72f,0xff2f,0xf68c,0xcd06,0xe566,0xdd29,0x8498,0x6d5e,0x639e,0x639e},
	{0xcb5f,0xcb5f,0xf35d,0xdbf2,0xed87,0xfe89,0xf689,0xf6ab,0xf6ef,0xff30,0xf731,0xf6ef,0xf6ee,0xf6ef,0xff10,0xf710,0xff10,0xf70f,0xff0f,0xf72f,0xf72f,0xf72f,0xff2f,0xf6ce,0xed46,0xcc64,0xeda6,0xcd09,0x6b7a,0x6b9e,0x935e,0x935e},
	{0xcb5e,0xcb5e,0xf33d,0xdc6f,0xf5a8,0xfe48,0xf648,0xf68a,0xf6ad,0xf6ad,0xf66e,0xfece,0xff0f,0xff30,0xff31,0xff31,0xf731,0xf730,0xf730,0xf70f,0xf70f,0xf70f,0xf70f,0xee4c,0xcc24,0xd465,0xf5e6,0xbccc,0x6b7d,0x639e,0x935e,0x935e},
	{0xf35d,0xf33d,0xdb34,0xdca9,0xf5e9,0xfe48,0xfe48,0xfe48,0xf5a6,0xdcc5,0xdd05,0xdd69,0xddab,0xe62e,0xee8f,0xeeaf,0xf6cf,0xeeaf,0xee8e,0xe60c,0xd58a,0xeeaf,0xf70f,0xf64c,0xdca4,0xdd25,0xeda6,0x93f3,0x935e,0x935e,0xcb5e,0xcb5e},
	{0xfb5d,0xf35d,0xd353,0xdcc9,0xf62a,0xfe49,0xf5e9,0xe548,0xccc9,0xe52a,0xf74c,0xde6b,0xadaa,0xbce9,0xc4e9,0xcd0a,0xd52a,0xc52a,0xb50b,0x8dce,0x8db1,0xd4a6,0xf64c,0xf64c,0xece6,0xf5a8,0xdd45,0x7b99,0x935e,0x935e,0xcb5e,0xcb5f},
	{0xf356,0xfb57,0xe30e,0xd428,0xe507,0xe506,0xd4a6,0xcc88,0xef0c,0xf78c,0xcfcc,0xcfcc,0x97cc,0x97ac,0x6f6d,0x6f0c,0x6f12,0x6f73,0x6fba,0x6fdb,0x6ede,0x9d76,0xdd08,0xf5ea,0xf5c8,0xedc7,0xb42f,0x935d,0xcb5e,0xcb5e,0xfb5d,0xfb5d},
	{0xfb57,0xfb57,0xfb50,0xe34f,0xd40b,0xd40b,0xe56c,0xf5cc,0xf78d,0xf76c,0xcfcc,0xcfcd,0x97ed,0x97ed,0x6fee,0x6fee,0x6ff4,0x6ff4,0x6ffb,0x6ffb,0x6efe,0x66de,0xa495,0xe507,0xedc9,0xc4ad,0x93ba,0x933e,0xcb5e,0xcb5e,0xfb5d,0xfb5d},
	{0xfb50,0xfb50,0xfc2d,0xfc2d,0xfdcd,0xfdcd,0xff8d,0xff8d,0xcfed,0xcfed,0x97ed,0x97ed,0x6fee,0x6fee,0x6ff4,0x6ff4,0x6ffb,0x6ffb,0x6f1f,0x6f1f,0x6d5f,0x6d5f,0x739d,0x93d8,0xa3b5,0xa39b,0xcb5e,0xcb5f,0xf35d,0xfb5d,0xfb57,0xfb57},
	{0xfb50,0xfb50,0xfc2d,0xfc2d,0xfdcd,0xfdcd,0xff8d,0xff8d,0xcfed,0xcfed,0x97ed,0x97ed,0x6fee,0x6fee,0x6ff4,0x6ff4,0x6ffb,0x6ffb,0x6f1f,0x6f1f,0x6d5f,0x6d5f,0x6b9f,0x639e,0x933e,0x935f,0xcb5f,0xcb5f,0xfb5d,0xfb5d,0xfb57,0xfb57},
};

// class Tex_t{
// public:
// 	int16_t x,y,w,h;
// 	uint16_t * data;
// 	Tex_t(int16_t x,int16_t y,int16_t w,int16_t h,uint16_t * data):x(x),y(y),w(w),h(h),data(data){}
// }